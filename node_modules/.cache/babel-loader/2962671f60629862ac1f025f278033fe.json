{"ast":null,"code":"import { boardSettings } from \"./config\";\n\n/* - - - - - - - - Board config - - - - - - - - - - */\nfunction createInitialBoardConfig() {\n  const {\n    alphabet,\n    colors\n  } = boardSettings;\n  let initialBoardState = [];\n  let colorFlag = false;\n\n  for (let y = 8; y >= 1; y--) {\n    for (let k = 0; k < alphabet.length; k++) {\n      const x = alphabet[k];\n      initialBoardState.push({\n        coordinates: {\n          x,\n          y\n        },\n        //TODO: is it useful?\n        shortand: `${x}${y}`,\n        color: colorFlag ? colors.black : colors.white\n      });\n      colorFlag = !colorFlag;\n    }\n\n    colorFlag = !colorFlag;\n  }\n\n  return initialBoardState;\n}\n\nexport const boardConfig = createInitialBoardConfig();\n/* - - - - - - - - - Players state config - - - - - - - - - - */\n\nexport function createInitialPlayersStateConfig(args) {\n  const {\n    boardConfig,\n    diagonalsCreator\n  } = args;\n  const {\n    cellsNumber\n  } = boardSettings;\n  const diagonals = diagonalsCreator();\n  const chars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]; // console.log(\"diagonals: \", diagonals);\n  // TODO: create initial checkers set programmatically\n\n  const initialCheckers = 12;\n  let w = [];\n\n  for (let i = 1; i <= cellsNumber / 2; i++) {// for (let j = 0; j <= 3; j++) {\n    //   w.push()\n    // }\n  }\n\n  const whitePlayerCheckers = [\"a1\", \"b2\", \"a3\", \"c1\", \"d2\", \"c3\", \"e1\", \"f2\", \"e3\", \"g1\", \"h2\", \"g3\"];\n  const blackPlayerCheckers = [\"a7\", \"b8\", \"b6\", \"c7\", \"d8\", \"d6\", \"e7\", \"f8\", \"f6\", \"g7\", \"h8\", \"h6\"];\n  return {\n    whitePlayerCheckers,\n    blackPlayerCheckers\n  };\n}\nexport const initialPlayersStateConfig = createInitialPlayersStateConfig({\n  boardConfig,\n  diagonalsCreator: createDiagonals\n});\n/* - - - - - - - - - Sub utils - - - - - - - - - - */\n\nexport function createDiagonals() {\n  // const { alphabet, cellsNumber } = boardConfig;\n  // const exampleChars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n  // TODO: create diagonals programmatically\n  // let set1 = [\n  //   [\"a7\", \"b8\"],\n  //   [\"a5\", \"b6\", \"c7\", \"d8\"],\n  //   [\"a3\", \"b4\", \"c5\", \"d6\", \"e7\", \"f8\"],\n  //\n  //   [\"a1\", \"b2\", \"c3\", \"d4\", \"e5\", \"f6\", \"g7\", \"h8\"],\n  //\n  //   [\"c1\", \"d2\", \"e3\", \"f4\", \"g5\", \"h6\"],\n  //   [\"e1\", \"f2\", \"g3\", \"h4\"],\n  //   [\"g1\", \"h2\"],\n  // ];\n  // let set2 = [\n  //   [\"a3\", \"b2\", \"c1\"],\n  //   [\"a5\", \"b4\", \"c3\", \"d2\", \"e1\"],\n  //\n  //   [\"a7\", \"b6\", \"c5\", \"d4\", \"e3\", \"f2\", \"g1\"],\n  //   [\"b8\", \"c7\", \"d6\", \"e5\", \"f4\", \"g3\", \"h2\"],\n  //\n  //   [\"d8\", \"e7\", \"f6\", \"g5\", \"h4\"],\n  //   [\"f8\", \"g7\", \"h5\"],\n  // ];\n  return [[\"a7\", \"b8\"], [\"a3\", \"b2\", \"c1\"], [\"a5\", \"b6\", \"c7\", \"d8\"], [\"a5\", \"b4\", \"c3\", \"d2\", \"e1\"], [\"a3\", \"b4\", \"c5\", \"d6\", \"e7\", \"f8\"], [\"a7\", \"b6\", \"c5\", \"d4\", \"e3\", \"f2\", \"g1\"], [\"a1\", \"b2\", \"c3\", \"d4\", \"e5\", \"f6\", \"g7\", \"h8\"], [\"b8\", \"c7\", \"d6\", \"e5\", \"f4\", \"g3\", \"h2\"], [\"c1\", \"d2\", \"e3\", \"f4\", \"g5\", \"h6\"], [\"d8\", \"e7\", \"f6\", \"g5\", \"h4\"], [\"e1\", \"f2\", \"g3\", \"h4\"], [\"f8\", \"g7\", \"h5\"], [\"g1\", \"h2\"]];\n}","map":{"version":3,"sources":["/Users/sergeylypko/Work/checkers/src/utils.ts"],"names":["boardSettings","createInitialBoardConfig","alphabet","colors","initialBoardState","colorFlag","y","k","length","x","push","coordinates","shortand","color","black","white","boardConfig","createInitialPlayersStateConfig","args","diagonalsCreator","cellsNumber","diagonals","chars","initialCheckers","w","i","whitePlayerCheckers","blackPlayerCheckers","initialPlayersStateConfig","createDiagonals"],"mappings":"AAEA,SAASA,aAAT,QAA8B,UAA9B;;AAGA;AAEA,SAASC,wBAAT,GAAoC;AAClC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuBH,aAA7B;AAEA,MAAII,iBAAoC,GAAG,EAA3C;AAEA,MAAIC,SAAS,GAAG,KAAhB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACM,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAME,CAAC,GAAGP,QAAQ,CAACK,CAAD,CAAlB;AAEAH,MAAAA,iBAAiB,CAACM,IAAlB,CAAuB;AACrBC,QAAAA,WAAW,EAAE;AAAEF,UAAAA,CAAF;AAAKH,UAAAA;AAAL,SADQ;AACE;AACvBM,QAAAA,QAAQ,EAAG,GAAEH,CAAE,GAAEH,CAAE,EAFE;AAGrBO,QAAAA,KAAK,EAAGR,SAAS,GAAGF,MAAM,CAACW,KAAV,GAAkBX,MAAM,CAACY;AAHrB,OAAvB;AAMAV,MAAAA,SAAS,GAAG,CAACA,SAAb;AACD;;AAEDA,IAAAA,SAAS,GAAG,CAACA,SAAb;AACD;;AAED,SAAOD,iBAAP;AACD;;AAED,OAAO,MAAMY,WAAW,GAAGf,wBAAwB,EAA5C;AAEP;;AAOA,OAAO,SAASgB,+BAAT,CAAyCC,IAAzC,EAAgF;AACrF,QAAM;AAAEF,IAAAA,WAAF;AAAeG,IAAAA;AAAf,MAAoCD,IAA1C;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAkBpB,aAAxB;AAEA,QAAMqB,SAAS,GAAGF,gBAAgB,EAAlC;AAEA,QAAMG,KAAK,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CAAd,CANqF,CAQrF;AAEA;;AAEA,QAAMC,eAAe,GAAG,EAAxB;AAEA,MAAIC,CAAC,GAAG,EAAR;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,WAAW,GAAG,CAAnC,EAAsCK,CAAC,EAAvC,EAA2C,CACzC;AACA;AACA;AACD;;AAED,QAAMC,mBAAmB,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,CAA5B;AAEA,QAAMC,mBAAmB,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6D,IAA7D,EAAmE,IAAnE,CAA5B;AAEA,SAAO;AAAED,IAAAA,mBAAF;AAAuBC,IAAAA;AAAvB,GAAP;AACD;AAED,OAAO,MAAMC,yBAAyB,GAAGX,+BAA+B,CAAC;AACvED,EAAAA,WADuE;AAEvEG,EAAAA,gBAAgB,EAAEU;AAFqD,CAAD,CAAjE;AAKP;;AAEA,OAAO,SAASA,eAAT,GAA2B;AAChC;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAO,CACL,CAAC,IAAD,EAAO,IAAP,CADK,EAEL,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAFK,EAGL,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAHK,EAIL,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAJK,EAKL,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,CALK,EAOL,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,CAPK,EAQL,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,CARK,EASL,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,CATK,EAWL,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,CAXK,EAYL,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAZK,EAaL,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAbK,EAcL,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAdK,EAeL,CAAC,IAAD,EAAO,IAAP,CAfK,CAAP;AAiBD","sourcesContent":["import range from \"lodash/range\";\n\nimport { boardSettings } from \"./config\";\nimport { CellColor, CellConfig, BoardConfig } from \"./types\";\n\n/* - - - - - - - - Board config - - - - - - - - - - */\n\nfunction createInitialBoardConfig() {\n  const { alphabet, colors } = boardSettings;\n\n  let initialBoardState: Array<CellConfig> = [];\n\n  let colorFlag = false;\n\n  for (let y = 8; y >= 1; y--) {\n    for (let k = 0; k < alphabet.length; k++) {\n      const x = alphabet[k];\n\n      initialBoardState.push({\n        coordinates: { x, y }, //TODO: is it useful?\n        shortand: `${x}${y}`,\n        color: (colorFlag ? colors.black : colors.white) as CellColor,\n      });\n\n      colorFlag = !colorFlag;\n    }\n\n    colorFlag = !colorFlag;\n  }\n\n  return initialBoardState;\n}\n\nexport const boardConfig = createInitialBoardConfig();\n\n/* - - - - - - - - - Players state config - - - - - - - - - - */\n\ntype CreateInitialPlayersStateConfig = {\n  boardConfig: BoardConfig;\n  diagonalsCreator: () => Array<string[]>;\n};\n\nexport function createInitialPlayersStateConfig(args: CreateInitialPlayersStateConfig) {\n  const { boardConfig, diagonalsCreator } = args;\n  const { cellsNumber } = boardSettings;\n\n  const diagonals = diagonalsCreator();\n\n  const chars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n\n  // console.log(\"diagonals: \", diagonals);\n\n  // TODO: create initial checkers set programmatically\n\n  const initialCheckers = 12;\n\n  let w = [];\n\n  for (let i = 1; i <= cellsNumber / 2; i++) {\n    // for (let j = 0; j <= 3; j++) {\n    //   w.push()\n    // }\n  }\n\n  const whitePlayerCheckers = [\"a1\", \"b2\", \"a3\", \"c1\", \"d2\", \"c3\", \"e1\", \"f2\", \"e3\", \"g1\", \"h2\", \"g3\"];\n\n  const blackPlayerCheckers = [\"a7\", \"b8\", \"b6\", \"c7\", \"d8\", \"d6\", \"e7\", \"f8\", \"f6\", \"g7\", \"h8\", \"h6\"];\n\n  return { whitePlayerCheckers, blackPlayerCheckers };\n}\n\nexport const initialPlayersStateConfig = createInitialPlayersStateConfig({\n  boardConfig,\n  diagonalsCreator: createDiagonals,\n});\n\n/* - - - - - - - - - Sub utils - - - - - - - - - - */\n\nexport function createDiagonals() {\n  // const { alphabet, cellsNumber } = boardConfig;\n\n  // const exampleChars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n\n  // TODO: create diagonals programmatically\n\n  // let set1 = [\n  //   [\"a7\", \"b8\"],\n  //   [\"a5\", \"b6\", \"c7\", \"d8\"],\n  //   [\"a3\", \"b4\", \"c5\", \"d6\", \"e7\", \"f8\"],\n  //\n  //   [\"a1\", \"b2\", \"c3\", \"d4\", \"e5\", \"f6\", \"g7\", \"h8\"],\n  //\n  //   [\"c1\", \"d2\", \"e3\", \"f4\", \"g5\", \"h6\"],\n  //   [\"e1\", \"f2\", \"g3\", \"h4\"],\n  //   [\"g1\", \"h2\"],\n  // ];\n\n  // let set2 = [\n  //   [\"a3\", \"b2\", \"c1\"],\n  //   [\"a5\", \"b4\", \"c3\", \"d2\", \"e1\"],\n  //\n  //   [\"a7\", \"b6\", \"c5\", \"d4\", \"e3\", \"f2\", \"g1\"],\n  //   [\"b8\", \"c7\", \"d6\", \"e5\", \"f4\", \"g3\", \"h2\"],\n  //\n  //   [\"d8\", \"e7\", \"f6\", \"g5\", \"h4\"],\n  //   [\"f8\", \"g7\", \"h5\"],\n  // ];\n\n  return [\n    [\"a7\", \"b8\"],\n    [\"a3\", \"b2\", \"c1\"],\n    [\"a5\", \"b6\", \"c7\", \"d8\"],\n    [\"a5\", \"b4\", \"c3\", \"d2\", \"e1\"],\n    [\"a3\", \"b4\", \"c5\", \"d6\", \"e7\", \"f8\"],\n\n    [\"a7\", \"b6\", \"c5\", \"d4\", \"e3\", \"f2\", \"g1\"],\n    [\"a1\", \"b2\", \"c3\", \"d4\", \"e5\", \"f6\", \"g7\", \"h8\"],\n    [\"b8\", \"c7\", \"d6\", \"e5\", \"f4\", \"g3\", \"h2\"],\n\n    [\"c1\", \"d2\", \"e3\", \"f4\", \"g5\", \"h6\"],\n    [\"d8\", \"e7\", \"f6\", \"g5\", \"h4\"],\n    [\"e1\", \"f2\", \"g3\", \"h4\"],\n    [\"f8\", \"g7\", \"h5\"],\n    [\"g1\", \"h2\"],\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}