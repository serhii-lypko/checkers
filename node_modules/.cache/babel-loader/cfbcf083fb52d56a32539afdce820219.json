{"ast":null,"code":"var _jsxFileName = \"/Users/sergeylypko/Work/checkers/src/App.tsx\";\nimport React, { useState, useCallback } from \"react\";\nimport { range, reverse } from \"lodash\";\nimport { boardSettings } from \"./config\";\nimport { boardConfig, initialPlayersStateConfig } from \"./utils\";\nimport { AppHolder, BoardHolder, Cell, Checker, YRulerContainer, XRulerContainer, YRulerCell, XRulerCell, ControlsHolder } from \"./style\";\n/* - - - - - - - - - - - - - - - - - - - */\n\n/* - - - - - - - - - - - - - - - - - - - */\n// TODO: --> --> make it work, make it right, make it fast <-- <--\n\n/* - - - - - - - - - - - - - - - - - - - */\n\n/* - - - - - - - - - - - - - - - - - - - */\n// TODO: XState?\n// TODO.1: memoization of components (cells, checkers and so on)\n// TODO.2: useCallback for handlers\n// TODO.3: animated appearing of cells & checkers\n// TODO.4: back & forward actions\n\n/* - - - - - - - - - - - - - - - - - - - */\n\nfunction App() {\n  const [playersState, updatePlayersState] = useState(initialPlayersStateConfig);\n  /* - - - - - - - - - - - - - - - - - - - */\n\n  const handleCellClick = useCallback(cell => {// const updatedState = boardState.map((stateCell) => {\n    //   if (cell.shortand === stateCell.shortand) {\n    //     return {\n    //       ...stateCell,\n    //       state: boardConfig.colors.black,\n    //     };\n    //   }\n    //\n    //   return stateCell;\n    // });\n    //\n    // updateBoardState(updatedState as CellConfig[]);\n  }, []);\n  /* - - - - - - - - - Rulers - - - - - - - - - - */\n\n  const renderYRuler = () => {\n    const {\n      cellsNumber,\n      cellWidth\n    } = boardSettings;\n    return /*#__PURE__*/React.createElement(YRulerContainer, {\n      className: \"y-ruler-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, reverse(range(0, cellsNumber)).map((key, i) => {\n      return /*#__PURE__*/React.createElement(YRulerCell, {\n        key: key,\n        top: key * cellWidth,\n        className: \"y-ruler-cell\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }\n      }, i + 1);\n    }));\n  };\n\n  const renderXRuler = () => {\n    const {\n      alphabet,\n      cellWidth\n    } = boardSettings;\n    return /*#__PURE__*/React.createElement(XRulerContainer, {\n      className: \"x-ruler-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, alphabet.map(char => {\n      return /*#__PURE__*/React.createElement(XRulerCell, {\n        key: char,\n        left: alphabet.indexOf(char) * cellWidth,\n        className: \"x-ruler-cell\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }, char);\n    }));\n  };\n  /* - - - - - - - - - - - - - - - - - - - */\n\n\n  const renderCells = () => {\n    if (!playersState) return null;\n    return boardConfig.map(cell => {\n      const {\n        shortand,\n        color,\n        coordinates\n      } = cell;\n      const yFactor = (boardSettings.cellsNumber - coordinates.y) * boardSettings.cellWidth;\n      const xFactor = boardSettings.alphabet.indexOf(coordinates.x) * boardSettings.cellWidth;\n      const cellUI = {\n        top: yFactor,\n        left: xFactor,\n        color\n      };\n      const {\n        whitePlayerCheckers,\n        blackPlayerCheckers\n      } = playersState;\n      const cellHasWhiteChecker = whitePlayerCheckers.includes(shortand);\n      const cellHasBlackChecker = blackPlayerCheckers.includes(shortand);\n      return /*#__PURE__*/React.createElement(Cell, {\n        key: shortand,\n        onClick: () => handleCellClick(cell),\n        ui: cellUI,\n        className: \"cell\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }\n      }, (cellHasWhiteChecker || cellHasBlackChecker) && /*#__PURE__*/React.createElement(Checker, {\n        isLightColor: cellHasWhiteChecker,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 60\n        }\n      }));\n    });\n  };\n  /* - - - - - - - - - - - - - - - - - - - - - - */\n\n  /* - - - - - - - - - - - - - - - - - - - - - - */\n\n\n  return /*#__PURE__*/React.createElement(AppHolder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BoardHolder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, renderYRuler(), renderXRuler(), renderCells()), /*#__PURE__*/React.createElement(ControlsHolder, {\n    className: \"controls-holder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => updatePlayersState(initialPlayersStateConfig),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, \"Back\"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, \"Forward\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sergeylypko/Work/checkers/src/App.tsx"],"names":["React","useState","useCallback","range","reverse","boardSettings","boardConfig","initialPlayersStateConfig","AppHolder","BoardHolder","Cell","Checker","YRulerContainer","XRulerContainer","YRulerCell","XRulerCell","ControlsHolder","App","playersState","updatePlayersState","handleCellClick","cell","renderYRuler","cellsNumber","cellWidth","map","key","i","renderXRuler","alphabet","char","indexOf","renderCells","shortand","color","coordinates","yFactor","y","xFactor","x","cellUI","top","left","whitePlayerCheckers","blackPlayerCheckers","cellHasWhiteChecker","includes","cellHasBlackChecker"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { range, reverse } from \"lodash\";\n\nimport { CellConfig, PlayersConfig } from \"./types\";\n\nimport { boardSettings } from \"./config\";\nimport { boardConfig, initialPlayersStateConfig } from \"./utils\";\n\nimport {\n  AppHolder,\n  BoardHolder,\n  Cell,\n  Checker,\n  YRulerContainer,\n  XRulerContainer,\n  YRulerCell,\n  XRulerCell,\n  ControlsHolder,\n} from \"./style\";\n\n/* - - - - - - - - - - - - - - - - - - - */\n/* - - - - - - - - - - - - - - - - - - - */\n\n// TODO: --> --> make it work, make it right, make it fast <-- <--\n\n/* - - - - - - - - - - - - - - - - - - - */\n/* - - - - - - - - - - - - - - - - - - - */\n\n// TODO: XState?\n\n// TODO.1: memoization of components (cells, checkers and so on)\n// TODO.2: useCallback for handlers\n// TODO.3: animated appearing of cells & checkers\n// TODO.4: back & forward actions\n\n/* - - - - - - - - - - - - - - - - - - - */\n\nfunction App() {\n  const [playersState, updatePlayersState] = useState<PlayersConfig>(initialPlayersStateConfig);\n\n  /* - - - - - - - - - - - - - - - - - - - */\n\n  const handleCellClick = useCallback((cell: CellConfig) => {\n    // const updatedState = boardState.map((stateCell) => {\n    //   if (cell.shortand === stateCell.shortand) {\n    //     return {\n    //       ...stateCell,\n    //       state: boardConfig.colors.black,\n    //     };\n    //   }\n    //\n    //   return stateCell;\n    // });\n    //\n    // updateBoardState(updatedState as CellConfig[]);\n  }, []);\n\n  /* - - - - - - - - - Rulers - - - - - - - - - - */\n\n  const renderYRuler = () => {\n    const { cellsNumber, cellWidth } = boardSettings;\n\n    return (\n      <YRulerContainer className=\"y-ruler-container\">\n        {reverse(range(0, cellsNumber)).map((key, i) => {\n          return (\n            <YRulerCell key={key} top={key * cellWidth} className=\"y-ruler-cell\">\n              {i + 1}\n            </YRulerCell>\n          );\n        })}\n      </YRulerContainer>\n    );\n  };\n\n  const renderXRuler = () => {\n    const { alphabet, cellWidth } = boardSettings;\n\n    return (\n      <XRulerContainer className=\"x-ruler-container\">\n        {alphabet.map((char) => {\n          return (\n            <XRulerCell key={char} left={alphabet.indexOf(char) * cellWidth} className=\"x-ruler-cell\">\n              {char}\n            </XRulerCell>\n          );\n        })}\n      </XRulerContainer>\n    );\n  };\n\n  /* - - - - - - - - - - - - - - - - - - - */\n\n  const renderCells = () => {\n    if (!playersState) return null;\n\n    return boardConfig.map((cell) => {\n      const { shortand, color, coordinates } = cell;\n\n      const yFactor = (boardSettings.cellsNumber - coordinates.y) * boardSettings.cellWidth;\n      const xFactor = boardSettings.alphabet.indexOf(coordinates.x) * boardSettings.cellWidth;\n\n      const cellUI = {\n        top: yFactor,\n        left: xFactor,\n        color,\n      };\n\n      const { whitePlayerCheckers, blackPlayerCheckers } = playersState;\n\n      const cellHasWhiteChecker = whitePlayerCheckers.includes(shortand);\n      const cellHasBlackChecker = blackPlayerCheckers.includes(shortand);\n\n      return (\n        <Cell key={shortand} onClick={() => handleCellClick(cell)} ui={cellUI} className=\"cell\">\n          {(cellHasWhiteChecker || cellHasBlackChecker) && <Checker isLightColor={cellHasWhiteChecker} />}\n        </Cell>\n      );\n    });\n  };\n\n  /* - - - - - - - - - - - - - - - - - - - - - - */\n  /* - - - - - - - - - - - - - - - - - - - - - - */\n\n  return (\n    <AppHolder>\n      <BoardHolder>\n        {renderYRuler()}\n        {renderXRuler()}\n\n        {renderCells()}\n      </BoardHolder>\n\n      <ControlsHolder className=\"controls-holder\">\n        <button onClick={() => updatePlayersState(initialPlayersStateConfig)}>Reset</button>\n        <button>Back</button>\n        <button>Forward</button>\n      </ControlsHolder>\n    </AppHolder>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}